generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  login     String   @unique
  password  String // Sera hashé
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int
  createdAt DateTime @default(now())
  
  employee  Employee?
}

model Role {
  id      Int    @id @default(autoincrement())
  nomRole String @unique // Ex: "Admin", "RH", "Employe"
  users   User[]
}

model Employee {
  id             Int      @id @default(autoincrement())
  utilisateur    User     @relation(fields: [userId], references: [id])
  userId         Int      @unique
  matricule      String   @unique
  nom            String
  prenom         String
  dateNaissance  DateTime
  telephone      String
  service        String
  poste          String
  salaireBase    Float
  dateEmbauche   DateTime
  
  fichesDePaie   FicheDePaie[]
  conges         Conge[]
  presences      Presence[]
  participations ParticipationFormation[]
}

model FicheDePaie {
  id        Int      @id @default(autoincrement())
  employe   Employee @relation(fields: [employeId], references: [id])
  employeId Int
  mois      DateTime
  annee     Int
  motif     String?
  statut    String   // Ex: "Généré", "Payé"
  
  avantages Avantage[]
  primes    Prime[]
}

model Avantage {
  id               Int           @id @default(autoincrement())
  nomAvantages     String
  montantAvantages Float
  fiches_de_paie   FicheDePaie[]
}

model Prime {
  id             Int           @id @default(autoincrement())
  nomPrime       String
  montantPrime   Float
  fiches_de_paie FicheDePaie[]
}

model Conge {
  id        Int      @id @default(autoincrement())
  employe   Employee @relation(fields: [employeId], references: [id])
  employeId Int
  dateDebut DateTime
  dateFin   DateTime
  motif     String
  statut    String   // Ex: "En attente", "Approuvé", "Refusé"
}

model Presence {
  id           Int      @id @default(autoincrement())
  employe      Employee @relation(fields: [employeId], references: [id])
  employeId    Int
  dateJournee  DateTime
  heureArrivee DateTime?
  heureDepart  DateTime?
}

model Formation {
  id          Int      @id @default(autoincrement())
  titre       String
  description String
  dureeHeures Int
  
  participations ParticipationFormation[]
}

model ParticipationFormation {
  id          Int       @id @default(autoincrement())
  employe     Employee  @relation(fields: [employeId], references: [id])
  employeId   Int
  formation   Formation @relation(fields: [formationId], references: [id])
  formationId Int
  dateInscription DateTime @default(now())
  statut      String    // Ex: "Planifié", "Terminé", "En cours"
  resultat    String?
}

model Annonce {
  id        Int      @id @default(autoincrement())
  titre     String
  contenu   String
  datePub   DateTime @default(now())
}
